///Datagram socket///
import java.net.*;

public class UDPC {
    public static void main(String[] args) {
        DatagramSocket skt;
        try {
            // Create DatagramSocket
            skt = new DatagramSocket();

            // Message to send
            String msg = "udp";
            byte[] b = msg.getBytes();

            // Server details
            InetAddress host = InetAddress.getByName("127.0.0.1");
            int serverSocket = 6788;

            // Send the request packet
            DatagramPacket request = new DatagramPacket(b, b.length, host, serverSocket);
            skt.send(request);

            // Prepare buffer to receive the reply
            byte[] buffer = new byte[1000];
            DatagramPacket reply = new DatagramPacket(buffer, buffer.length);

            // Receive the reply
            skt.receive(reply);

            // Print the received message
            System.out.println("Client received: " + new String(reply.getData(), 0, reply.getLength()));

            // Close the socket
            skt.close();
        } catch (Exception ex) {
            // Silently handle exceptions
        }
    }
}


import java.net.*;

public class UDPS {

    public static void main(String[] args) {
        DatagramSocket skt = null;

        try {
            // Create a DatagramSocket at port 6788
            skt = new DatagramSocket(6788);

            // Prepare a buffer to receive messages
            byte[] buffer = new byte[1000];

            // Server runs infinitely
            while (true) {
                // Receive the request
                DatagramPacket request = new DatagramPacket(buffer, buffer.length);
                skt.receive(request);

                // Process the request
                String message = new String(request.getData(), 0, request.getLength());
                String[] messageParts = message.split(" ");
                String responseMessage = messageParts[0] + " Network Laboratory";

                // Prepare and send the response
                byte[] sendMsg = responseMessage.getBytes();
                DatagramPacket reply = new DatagramPacket(
                        sendMsg, 
                        sendMsg.length, 
                        request.getAddress(), 
                        request.getPort()
                );
                skt.send(reply);

                // Print the response
                System.out.println("Server sent: " + responseMessage);
            }

        } catch (Exception ex) {
            // Handle exceptions silently
        } finally {
            if (skt != null && !skt.isClosed()) {
                skt.close();
            }
        }
    }
}







///*Bellman Ford*///
import java.util.Scanner; 
public class BellmanFord 
{ 
private int D[]; private int num_ver; 
public static final int MAX_VALUE = 999; 
public BellmanFord(int num_ver) 
{ 
this.num_ver = num_ver; D = new int[num_ver + 1]; 
} 
public void BellmanFordEvaluation(int source, int A[][]) 
{ 
for (int node = 1; node <= num_ver; node++) 
{ 
D[node] = MAX_VALUE;  } 
D[source] = 0; 
for (int node = 1; node <= num_ver - 1; node++) 
{ 
for (int sn = 1; sn <= num_ver; sn++) 
{ 
for (int dn = 1; dn <= num_ver; dn++) 
{ 
if (A[sn][dn] != MAX_VALUE) 
{ 
if (D[dn] > D[sn]+ A[sn][dn]) 
D[dn] = D[sn] + A[sn][dn];          }  }  }  }
for (int sn = 1; sn <= num_ver; sn++) 
{ 
for (int dn = 1; dn <= num_ver; dn++) 
{ 
if (A[sn][dn] != MAX_VALUE) 
{ 
if (D[dn] > D[sn]+ A[sn][dn]) 
System.out.println("The Graph contains negative egde cycle"); 
}  }  } 
for (int vertex = 1; vertex <= num_ver; vertex++)
{ 
System.out.println("distance of source " + source + " to "+ vertex + " is " + D[vertex]);   }  }
public static void main(String[ ] args)  { 
int num_ver = 0; int source; 
Scanner scanner = new Scanner(System.in);
 System.out.println("Enter the number of vertices");
 num_ver = scanner.nextInt(); 
int A[][] = new int[num_ver + 1][num_ver + 1]; 
System.out.println("Enter the adjacency matrix"); 
for (int sn = 1; sn <= num_ver; sn++)  { 
for (int dn = 1; dn <= num_ver; dn++)
{
A[sn][dn] = scanner.nextInt(); if (sn == dn) 
{ 
A[sn][dn] = 0; continue; 
} 
if (A[sn][dn] == 0) 
{ 
A[sn][dn] = MAX_VALUE;  }  }  } 
System.out.println("Enter the source vertex"); source = scanner.nextInt(); 
BellmanFord b = new BellmanFord (num_ver); b.BellmanFordEvaluation(source, A); scanner.close();  }  }



///*Leaky Bucket*///
import java.io.*; import java.util.*; 
class Queue 
{ 
int q[],f=0,r=0,size; 
void insert(int n) 
{ 
Scanner in = new Scanner(System.in); 
q=new int[10]; 
for(int i=0;i<n;i++) 
{ 
System.out.print("\nEnter " + i + " element: "); 
int ele=in.nextInt(); 
if(r+1>10) 
{ 
System.out.println("\nQueue is full \nLost Packet: "+ele); 
break; 
}
else 
{  } } } 
r++; 
q[i]=ele; 

void delete() 
{ 
Scanner in = new Scanner(System.in); Thread t=new Thread(); 
if(r==0) 
System.out.print("\nQueue empty "); 
else 
{ 
for(int i=f;i<r;i++) 
{ 
try 
{ 
t.sleep(1000);   }
catch(Exception e)
{       } 
System.out.print("\nLeaked Packet: "+q[i]); f++; 
} 
} 
System.out.println(); 
}    } 
class Leaky extends Thread 
{ 
public static void main(String ar[]) throws Exception 
{  } 
Queue q=new Queue(); 
Scanner src=new Scanner(System.in); 
System.out.println("\nEnter the packets to be sent:");
q. insert(size); q.delete(); 
int size=src.nextInt(); 
}  }
