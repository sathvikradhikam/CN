///*tcp/ip*///

import java.net.*;

import java.io.*;

public class contentclient  

{

  public static void main( String args[ ] ) throws Exception

  {

               Socket sock = new Socket( "127.0.0.1", 4000);

               System.out.print("Enter the file name");

               BufferedReader keyRead = new BufferedReader(new InputStreamReader(System.in));

               String fname = keyRead.readLine();

OutputStream  ostream = sock.getOutputStream( );

               PrintWriter pwrite = new PrintWriter(ostream, true);

               pwrite.println(fname);           

               InputStream istream = sock.getInputStream();

               BufferedReader socketRead = new BufferedReader(new InputStreamReader(istream));

               String str;

               while((str = socketRead.readLine())  !=  null)   

               {

                               System.out.println(str);         

               }

               pwrite.close(); socketRead.close(); keyRead.close();

  }

}

 

import java.net.*;   

import java.io.*;

public class contentserver  

{

  public static void main(String args[]) throws Exception

  {

ServerSocket sersock = new ServerSocket(4000);  

              System.out.println("Server ready for connection");

Socket sock = sersock.accept();                

System.out.println("Connection is successful and wating for chatting");

InputStream istream = sock.getInputStream( );

BufferedReader fileRead =new BufferedReader(new InputStreamReader(istream));

String fname = fileRead.readLine( );

BufferedReader contentRead = new BufferedReader(new FileReader(fname) );

OutputStream ostream = sock.getOutputStream( );

PrintWriter pwrite = new PrintWriter(ostream, true);

String str;

while((str = contentRead.readLine()) !=  null)

{

pwrite.println(str);           

  }

sock.close();

sersock.close(); 

pwrite.close();

fileRead.close();

contentRead.close();

  }

}

 

 

 

 

 

 

 

///*datagram socket*///

import java.net.*;
 
public class UDPC {
    public static void main(String[] args) {
        DatagramSocket skt;
        try {
            // Create DatagramSocket
            skt = new DatagramSocket();
 
            // Message to send
            String msg = "udp";
            byte[] b = msg.getBytes();
 
            // Server details
            InetAddress host = InetAddress.getByName("127.0.0.1");
            int serverSocket = 6788;
 
            // Send the request packet
            DatagramPacket request = new DatagramPacket(b, b.length, host, serverSocket);
            skt.send(request);
 
            // Prepare buffer to receive the reply
            byte[] buffer = new byte[1000];
            DatagramPacket reply = new DatagramPacket(buffer, buffer.length);
 
            // Receive the reply
            skt.receive(reply);
 
            // Print the received message
            System.out.println("Client received: " + new String(reply.getData(), 0, reply.getLength()));
 
            // Close the socket
            skt.close();
        } catch (Exception ex) {
            // Silently handle exceptions
        }
    }
}
 

import java.net.*;
 
public class UDPS {
 
    public static void main(String[] args) {
        DatagramSocket skt = null;
 
        try {
            // Create a DatagramSocket at port 6788
            skt = new DatagramSocket(6788);
 
            // Prepare a buffer to receive messages
            byte[] buffer = new byte[1000];
 
            // Server runs infinitely
            while (true) {
                // Receive the request
                DatagramPacket request = new DatagramPacket(buffer, buffer.length);
                skt.receive(request);
 
                // Process the request
                String message = new String(request.getData(), 0, request.getLength());
                String[] messageParts = message.split(" ");
                String responseMessage = messageParts[0] + " Network Laboratory";
 
                // Prepare and send the response
                byte[] sendMsg = responseMessage.getBytes();
                DatagramPacket reply = new DatagramPacket(
                        sendMsg, 
                        sendMsg.length, 
                        request.getAddress(), 
                        request.getPort()
                );
                skt.send(reply);
 
                // Print the response
                System.out.println("Server sent: " + responseMessage);
            }
 
        } catch (Exception ex) {
            // Handle exceptions silently
        } finally {
            if (skt != null && !skt.isClosed()) {
                skt.close();
            }
        }
    }
}
 

 

 

 

///*Bellman Ford*///

import java.util.Scanner; 
public class BellmanFord 
{ 
private int D[]; private int num_ver; 
public static final int MAX_VALUE = 999; 
public BellmanFord(int num_ver) 
{ 
this.num_ver = num_ver; D = new int[num_ver + 1]; 
} 
public void BellmanFordEvaluation(int source, int A[][]) 
{ 
for (int node = 1; node <= num_ver; node++) 
{ 
D[node] = MAX_VALUE;  } 
D[source] = 0; 
for (int node = 1; node <= num_ver - 1; node++) 
{ 
for (int sn = 1; sn <= num_ver; sn++) 
{ 
for (int dn = 1; dn <= num_ver; dn++) 
{ 
if (A[sn][dn] != MAX_VALUE) 
{ 
if (D[dn] > D[sn]+ A[sn][dn]) 
D[dn] = D[sn] + A[sn][dn];          }  }  }  }
for (int sn = 1; sn <= num_ver; sn++) 
{ 
for (int dn = 1; dn <= num_ver; dn++) 
{ 
if (A[sn][dn] != MAX_VALUE) 
{ 
if (D[dn] > D[sn]+ A[sn][dn]) 
System.out.println("The Graph contains negative egde cycle"); 
}  }  } 
for (int vertex = 1; vertex <= num_ver; vertex++)
{ 
System.out.println("distance of source " + source + " to "+ vertex + " is " + D[vertex]);   }  }
public static void main(String[ ] args)  { 
int num_ver = 0; int source; 
Scanner scanner = new Scanner(System.in);
 System.out.println("Enter the number of vertices");
 num_ver = scanner.nextInt(); 
int A[][] = new int[num_ver + 1][num_ver + 1]; 
System.out.println("Enter the adjacency matrix"); 
for (int sn = 1; sn <= num_ver; sn++)  { 
for (int dn = 1; dn <= num_ver; dn++)
{
A[sn][dn] = scanner.nextInt(); if (sn == dn) 
{ 
A[sn][dn] = 0; continue; 
} 
if (A[sn][dn] == 0) 
{ 
A[sn][dn] = MAX_VALUE;  }  }  } 
System.out.println("Enter the source vertex"); source = scanner.nextInt(); 
BellmanFord b = new BellmanFord (num_ver); b.BellmanFordEvaluation(source, A); scanner.close();  }  }

 

 

 

 

///*Leaky Bucket*///

import java.util.*;
class Queue 
{
    private int[] queue;
    private int front = 0, rear = 0, capacity;
    private final int maxQueueSize = 10;
    Queue(int size) 
    {
        capacity = Math.min(size, maxQueueSize); // Limit capacity to maxQueueSize
        queue = new int[capacity];
    }
    void insert(int n) 
    {
        Scanner sc = new Scanner(System.in);
        for (int i = 0; i < n; i++) {
            System.out.print("\nEnter element " + (i + 1) + ": ");
            int ele = sc.nextInt();
            if (rear >= capacity) {
                System.out.println("\nQueue is full. Lost Packet: " + ele);
                break;
            } 
            else 
            {
                queue[rear++] = ele;
            }
        }
    }
    void delete() 
    {
        if (rear == front) 
        {
            System.out.println("\nQueue is empty.");
            return;
        }
        for (int i = front; i < rear; i++) 
        {
            try 
            {
                Thread.sleep(1000); // Simulate packet processing delay
                System.out.println("Leaked Packet: " + queue[i]);
            } catch (InterruptedException e) 
            {
                System.out.println("Error Leaking packet: " + queue[i]);
            }
        }
        front = rear = 0; // Reset queue after processing
    }
}
public class Leaky 
{
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of packets to be sent: ");
        int size = sc.nextInt();
        Queue queue = new Queue(size);
        queue.insert(size);
        queue.delete();
    }
}

 

 

 

///*simulation 1*///

set ns [new Simulator]     

set nf [open pa1.nam w]

$ns namtrace-all $nf

 

set tf [open pa1.tr w]

$ns trace-all $tf

 

proc finish {} {

global ns nf tf

$ns flush-trace

close $nf

close $tf

exec nam pa1.nam &

exit 0

}

set n0 [$ns node]

set n1 [$ns node]

set n2 [$ns node]

set n3 [$ns node]

 

#$ns color 1 "red"

#$ns color 2 "blue"

 

$ns duplex-link $n0 $n2 20Mb 10ms DropTail

$ns duplex-link $n1 $n2 50Mb 5ms DropTail

$ns duplex-link $n2 $n3 10Mb 1000ms DropTail

 

#$ns duplex-link $n0 $n2 color "green"

 

$ns queue-limit $n0 $n2 10

$ns queue-limit $n1 $n2 10

 

set udp0 [new Agent/UDP]

$ns attach-agent $n0 $udp0

set ns [new Simulator]                                                                             

 

set nf [open pa1.nam w]

$ns namtrace-all $nf

 

set tf [open pa1.tr w]

$ns trace-all $tf

 

proc finish {} {

global ns nf tf

$ns flush-trace

close $nf

close $tf

exec nam pa1.nam &

exit 0

}

set n0 [$ns node]

set n1 [$ns node]

set n2 [$ns node]

set n3 [$ns node]

 

#$ns color 1 "red"

#$ns color 2 "blue"

 

$ns duplex-link $n0 $n2 20Mb 10ms DropTail

$ns duplex-link $n1 $n2 50Mb 5ms DropTail

$ns duplex-link $n2 $n3 10Mb 1000ms DropTail

 

#$ns duplex-link $n0 $n2 color "green"

 

$ns queue-limit $n0 $n2 10

$ns queue-limit $n1 $n2 10

set udp0 [new Agent/UDP]

$ns attach-agent $n0 $udp0

set ns [new Simulator]                                                                             

 

set nf [open pa1.nam w]

$ns namtrace-all $nf

 

set tf [open pa1.tr w]

$ns trace-all $tf

 

proc finish {} {

global ns nf tf

$ns flush-trace

close $nf

close $tf

exec nam pa1.nam &

exit 0

}

set n0 [$ns node]

set n1 [$ns node]

set n2 [$ns node]

set n3 [$ns node]

 

#$ns color 1 "red"

#$ns color 2 "blue"

 

$ns duplex-link $n0 $n2 20Mb 10ms DropTail

$ns duplex-link $n1 $n2 50Mb 5ms DropTail

$ns duplex-link $n2 $n3 10Mb 1000ms DropTail

 

#$ns duplex-link $n0 $n2 color "green"

 

$ns queue-limit $n0 $n2 10

$ns queue-limit $n1 $n2 10

 

set udp0 [new Agent/UDP]

$ns attach-agent $n0 $udp0

 

BEGIN {

c=0;

}

{

if ($1=="d")

{

c++;

printf("%s\t%s\n",$5,$11);

}

}

END{

printf("The number of packet dropped= %d\n",c);

}




///*simulation 2*///

set ns [ new Simulator ]

set nf [ open pa2.nam w ]

$ns namtrace-all $nf

set tf [ open pa2.tr w ]

$ns trace-all $tf

set n0 [$ns node]

set n1 [$ns node]

set n2 [$ns node]

set n3 [$ns node]

set n4 [$ns node]

set n5 [$ns node]

$n4 shape box

$ns duplex-link $n0 $n4 1005Mb 1ms DropTail

$ns duplex-link $n1 $n4 50Mb 1ms DropTail

$ns duplex-link $n2 $n4 2000Mb 1ms DropTail

$ns duplex-link $n3 $n4 200Mb 1ms DropTail

$ns duplex-link $n4 $n5 1Mb 1ms DropTail

 

set p1 [new Agent/Ping]

$ns attach-agent $n0 $p1

$p1 set packetSize_ 500000

$p1 set interval_ 0.0001

set p2 [new Agent/Ping]

$ns attach-agent $n1 $p2

set p3 [new Agent/Ping]

$ns attach-agent $n2 $p3

$p3 set packetSize_ 30000

$p3 set interval_ 0.00001

set p4 [new Agent/Ping]

$ns attach-agent $n3 $p4

set p5 [new Agent/Ping]

$ns attach-agent $n5 $p5

$ns queue-limit $n0 $n4 5

$ns queue-limit $n2 $n4 3

$ns queue-limit $n4 $n5 2

Agent/Ping instproc recv {from rtt} {

$self instvar node_

puts "node [$node_ id] received answer from $from with round trip time $rtt msec"

}

$ns connect $p1 $p5

$ns connect $p3 $p4

proc finish { } {

global ns nf tf

$ns flush-trace

close $nf

close $tf

exec nam pa2.nam &

exit 0

}

$ns at 0.1 "$p1 send"

$ns at 0.2 "$p1 send"

$ns at 0.3 "$p1 send"

$ns at 0.4 "$p1 send"

$ns at 0.5 "$p1 send"

$ns at 0.6 "$p1 send"

$ns at 0.7 "$p1 send"

$ns at 0.8 "$p1 send"

$ns at 0.9 "$p1 send"

$ns at 1.0 "$p1 send"

$ns at 1.1 "$p1 send"

$ns at 1.2 "$p1 send"

$ns at 1.3 "$p1 send"

$ns at 1.4 "$p1 send"

$ns at 1.5 "$p1 send"

$ns at 1.6 "$p1 send"

$ns at 1.7 "$p1 send"

$ns at 1.8 "$p1 send"

$ns at 1.9 "$p1 send"

$ns at 2.0 "$p1 send"

$ns at 2.1 "$p1 send"

$ns at 2.2 "$p1 send"

$ns at 2.3 "$p1 send"

$ns at 2.4 "$p1 send"

$ns at 2.5 "$p1 send"

$ns at 2.6 "$p1 send"

$ns at 2.7 "$p1 send"

$ns at 2.8 "$p1 send"

$ns at 2.9 "$p1 send"

$ns at 0.1 "$p3 send"

$ns at 0.2 "$p3 send"

$ns at 0.3 "$p3 send"

$ns at 0.4 "$p3 send"

$ns at 0.5 "$p3 send"

$ns at 0.6 "$p3 send"

$ns at 0.7 "$p3 send"

$ns at 0.8 "$p3 send"

$ns at 0.9 "$p3 send"

$ns at 1.0 "$p3 send"

$ns at 1.1 "$p3 send"

$ns at 1.2 "$p3 send"

$ns at 1.3 "$p3 send"

$ns at 1.4 "$p3 send"

$ns at 1.5 "$p3 send"

$ns at 1.6 "$p3 send"

$ns at 1.7 "$p3 send"

$ns at 1.8 "$p3 send"

$ns at 1.9 "$p3 send"

$ns at 2.0 "$p3 send"

$ns at 2.1 "$p3 send"

$ns at 2.2 "$p3 send"

$ns at 2.3 "$p3 send"

$ns at 2.4 "$p3 send"

$ns at 2.5 "$p3 send"

$ns at 2.6 "$p3 send"

$ns at 2.7 "$p3 send"

$ns at 2.8 "$p3 send"

$ns at 2.9 "$p3 send"

$ns at 3.0 "finish"

$ns run


BEGIN{

drop=0;

}

{

if($1=="d")

{

drop++;

}

}

END{

printf("Total number of %s packets dropped due to congestion=%d\n",$5,drop);

}




///*simulation 3*///

set ns [new Simulator]

set tf [open pa3.tr w]

$ns trace-all $tf

set nf [open pa3.nam w]

$ns namtrace-all $nf

 

set n0 [$ns node]

$n0 color "magenta"

$n0 label "src1"

set n1 [$ns node]

set n2 [$ns node]

$n2 color "magenta"

$n2 label "src2"

set n3 [$ns node]

$n3 color "blue"

$n3 label "dest2"

set n4 [$ns node]

set n5 [$ns node]

$n5 color "blue"

$n5 label "dest1"

 

$ns make-lan "$n0 $n1 $n2 $n3 $n4" 100Mb 100ms LL Queue/DropTail Mac/802_3

$ns duplex-link $n4 $n5 1Mb 1ms DropTail

 

set tcp0 [new Agent/TCP]

$ns attach-agent $n0 $tcp0

set ftp0 [new Application/FTP]

$ftp0 attach-agent $tcp0

$ftp0 set packetSize_ 500

$ftp0 set interval_ 0.0001

set sink5 [new Agent/TCPSink]

$ns attach-agent $n5 $sink5

 

$ns connect $tcp0 $sink5

 

set tcp2 [new Agent/TCP]

$ns attach-agent $n2 $tcp2

set ftp2 [new Application/FTP]

$ftp2 attach-agent $tcp2

$ftp2 set packetSize_ 600

$ftp2 set interval_ 0.0001

set sink3 [new Agent/TCPSink]

$ns attach-agent $n3 $sink3

 

$ns connect $tcp2 $sink3

 

set file1 [open file1.tr w]

$tcp0 attach $file1

set file2 [open file2.tr w]

$tcp2 attach $file2

 

$tcp0 trace cwnd_

$tcp2 trace cwnd_

 

proc finish { } {

global ns nf tf

$ns flush-trace

close $tf

close $nf

exec nam pa3.nam &

exit 0

}

$ns at 0.1 "$ftp0 start"

$ns at 5 "$ftp0 stop"

$ns at 7 "$ftp0 start"

$ns at 0.2 "$ftp2 start"

$ns at 8 "$ftp2 stop"

$ns at 14 "$ftp0 stop"

$ns at 10 "$ftp2 start"

$ns at 15 "$ftp2 stop"

$ns at 16 "finish"

$ns run

 

 

BEGIN {

}

{

if($6=="cwnd_")

printf("%f\t%f\t\n",$1,$7);

}

END{

}
